# Jay's Frames - AI-Powered Kanban Board System

## Overview
A full-stack digital Kanban board system with AI assistant for managing custom art frame orders. Features drag-and-drop functionality, real-time status updates, customer notifications, and an assertive AI assistant that ensures orders are completed on time.

## Features
- **Drag & Drop Kanban Board**: Visual order management with 9 status columns
- **AI Assistant**: Proactive order management with alerts and time tracking
- **Customer Portal**: Order status lookup and tracking
- **Notifications**: Email/SMS alerts for status changes
- **Time Estimation**: AI-powered complexity scoring and time calculations
- **Material Tracking**: Inventory management for frames, mats, glass
- **Dark Theme**: Edgy aesthetic with jade accent colors
- **Analytics Dashboard**: Performance metrics and statistics

## Tech Stack
- **Frontend**: React 18, TypeScript, Tailwind CSS
- **Backend**: Node.js, Express, TypeScript
- **Database**: PostgreSQL with Prisma ORM
- **AI**: OpenAI API for assistant functionality
- **Notifications**: Twilio (SMS), SendGrid (Email)
- **Real-time**: Socket.io for live updates
- **State Management**: Zustand
- **Drag & Drop**: React DnD

## Installation

### Prerequisites
- Node.js 18+
- PostgreSQL 14+
- npm or yarn
- OpenAI API key
- Twilio account (for SMS)
- SendGrid account (for email)

### Setup
1. Clone the repository
```bash
git clone https://github.com/yourusername/jays-frames-kanban.git
cd jays-frames-kanban
```

2. Install dependencies
```bash
npm install
```

3. Set up environment variables
```bash
cp .env.example .env
# Edit .env with your credentials
```

4. Run database migrations
```bash
npm run db:migrate
```

5. Seed initial data
```bash
npm run db:seed
```

6. Start development servers
```bash
npm run dev
```

## Project Structure
```
jays-frames-kanban/
├── client/                 # React frontend
│   ├── src/
│   │   ├── components/    # UI components
│   │   ├── pages/        # Page components
│   │   ├── services/     # API services
│   │   ├── stores/       # Zustand stores
│   │   └── utils/        # Utilities
├── server/                # Express backend
│   ├── src/
│   │   ├── controllers/  # Route controllers
│   │   ├── models/       # Database models
│   │   ├── services/     # Business logic
│   │   ├── ai/          # AI assistant logic
│   │   └── notifications/# Email/SMS services
├── shared/               # Shared types/interfaces
└── database/            # Prisma schema & migrations
```

## API Endpoints

### Orders
- `GET /api/orders` - Get all orders
- `GET /api/orders/:id` - Get order by ID
- `POST /api/orders` - Create new order
- `PUT /api/orders/:id` - Update order
- `PATCH /api/orders/:id/status` - Update order status
- `DELETE /api/orders/:id` - Delete order

### Customer Portal
- `GET /api/customer/order/:trackingId` - Lookup order status
- `POST /api/customer/subscribe` - Subscribe to notifications

### AI Assistant
- `GET /api/ai/analysis` - Get workload analysis
- `POST /api/ai/chat` - Chat with assistant
- `GET /api/ai/alerts` - Get current alerts

### Materials
- `GET /api/materials` - Get inventory
- `POST /api/materials/check` - Check materials for order

## Configuration

### Order Types & Time Estimates
- **Just Frame**: 1-2 hours
- **Mat with Opening**: 1.5-2.5 hours
- **Shadowbox**: 3-4 hours

### Status Workflow
1. Order Processed
2. Materials Ordered
3. Materials Arrived
4. Frame Cut
5. Mat Cut
6. Prepped
7. Completed
8. Delayed (special status)
9. Picked Up

## Deployment

### Replit Deployment
1. Import repository to Replit
2. Set environment variables in Secrets
3. Run `npm run build`
4. Start with `npm start`

### Production Deployment
- Frontend: Deploy to Netlify
- Backend: Deploy to Railway/Render
- Database: Use managed PostgreSQL

## Environment Variables
```
# Database
DATABASE_URL=postgresql://...

# API Keys
OPENAI_API_KEY=sk-...
TWILIO_ACCOUNT_SID=...
TWILIO_AUTH_TOKEN=...
TWILIO_PHONE_NUMBER=...
SENDGRID_API_KEY=...

# App Config
JWT_SECRET=...
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:5000
```

## Contributing
1. Fork the repository
2. Create feature branch
3. Commit changes
4. Push to branch
5. Create Pull Request

## License
MIT License - Jay's Frames © 2024